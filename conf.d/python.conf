let PATH = expand("~/.pyenv/shims") . ":" . $PATH

" jedi-vim python系
NeoBundle 'vim-scripts/python_open_module'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'tell-k/vim-autopep8'

let g:jedi#use_tabs_not_buffers = 1
let g:jedi#completions_command = "<C-Space>"

" Djangoを正しくVimで読み込めるようにする
NeoBundleLazy "lambdalisue/vim-django-support", {
\ "autoload": {
\   "filetypes": ["python", "python3", "djangohtml"]
\ }}


NeoBundleLazy "davidhalter/jedi-vim", {
\ "autoload": {
\   "filetypes": ["python", "python3", "djangohtml"],
\ },
\ "build": {
\   "mac": "pip install jedi",
\   "unix": "pip install jedi",
\ }}

NeoBundleLazy 'fisadev/vim-isort',{
\ "autoload": {
\   "filetypes": ["python", "python3"],
\ },
\ "build": {
\   "mac": "pip install isort",
\   "unix": "pip install isort",
\ }}
    



" pyenv 処理用に vim-pyenv を追加
" Note: depends が指定されているため jedi-vim より後にロードされる（ことを期待）
NeoBundleLazy "lambdalisue/vim-pyenv", {
      \ "depends": ['davidhalter/jedi-vim'],
      \ "autoload": {
      \   "filetypes": ["python", "python3", "djangohtml"]
      \ }}


" Execute python script C-P 
function! s:ExecPy()
    exe "!" . &ft . " %"
:endfunction
command! Exec call <SID>ExecPy()
autocmd FileType python map <silent> <C-P> :call <SID>ExecPy()<CR>

let s:hooks = neobundle#get_hooks("jedi-vim")
function! s:hooks.on_source(bundle)
  " jediにvimの設定を任せると'completeopt+=preview'するので
  " 自動設定機能をOFFにし手動で設定を行う
  let g:jedi#auto_vim_configuration = 0
  " 補完の最初の項目が選択された状態だと使いにくいためオフにする
  let g:jedi#popup_select_first = 0
  set completeopt=longest,menuone,preview
  " quickrunと被るため大文字に変更
  let g:jedi#rename_command = '<Leader>R'
  " gundoと被るため大文字に変更
  let g:jedi#goto_assignments_command = '<Leader>G'
endfunction


let g:syntastic_python_checkers = ["flake8"]


" pep8の桁数制限を緩和
let g:autopep8_max_line_length=99

let g:lightline = {
      \ 'active': {
      \   'left': [ 
      \       [ 'mode', 'paste' ], 
      \       [ 'pyenv' ],
      \       [ 'fugitive', 'filename' ] 
      \   ],
      \   'right': [
      \       [ 'syntastic', 'lineinfo' ],
      \       [ 'percent' ],
      \       [ 'fileformat', 'fileencoding', 'filetype' ]
      \   ]
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'pyenv': 'pyenv#statusline#component',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }




